=== Tips and tricks

==== Reload applications' code on every request

You can use {{add-request-handler-hook!}} to reload the applications'
code every time a request is handled by awful.  Here's a simple
example:

<enscript highlight=scheme>
(use awful)

(add-request-handler-hook!
 'reload-on-request
 (lambda (path handler)
   (reload-apps (awful-apps))
   (handler)))

(define-page (main-page-path)
  (lambda ()
    "1"))
</enscript>


==== Use {{link}} and {{form}} for links and forms

Instead of using {{<a>}} and {{<form>}} for creating links and forms,
respectively, consider using the {{link}} and {{form}} procedures
instead.  They are specially useful when using sessions, since they
transparently handle the session identifier for you.  Even if you
don't use sessions, they may save you some work if one day you decide
to use sessions (then you won't have do to anything regarding to links
and forms).


==== Use {{with-request-variables}} when referencing the same request variable multiple times

When you need to access the same request variable more than once,
consider using {{with-request-variables}}.

For example, instead of:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-session-page "save-and-show-user"
  (lambda ()
    ($session-set! 'user ($ 'user))
    `("Welcome " ,($ 'user "nobody") "!")))
</enscript>

consider using something like:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-session-page "save-and-show-user"
  (lambda ()
    (with-request-variables (user)
      ($session-set! 'user user)
      `("Welcome " ,(or user "nobody") "!"))))
</enscript>


==== Use the web REPL and the session inspector for debugging

You can simply use the {{--development-mode}} option for the awful
application server to enable the web REPL and the session inspector
(when {{enable-session}} is {{#t}}).  The development mode allows
access to them for the localhost.  When in development mode, the web
REPL and the session inspector are available at the {{/web-repl}} and
{{/session-inspector}} paths.

If you want further flexibility, you can customize the web REPL and
the session inspector.

Here's a simple recipe to allow access for your local machine to the
web REPL ({{/repl}}) and to the session inspector
({{/session-inspector}}).

<enscript highlight=scheme>
(session-inspector-access-control
 (lambda ()
   (member (remote-address) '("127.0.0.1"))))

(enable-session-inspector "/session-inspector")


(web-repl-access-control
 (lambda ()
   (member (remote-address) '("127.0.0.1"))))

(enable-web-repl "/repl")
</enscript>

To access them, just point your browser to
{{http://localhost:<port>/repl}} and
{{http://localhost:<port>/session-inspector}}, respectively.


==== Create custom page definers when {{page-template}} and/or plain {{define-page}} are not enough

You can define your own page definers when {{page-template}} or the
plain {{define-page}} is not enough for what you need.  Here's an
example:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define (define-custom-page path content)
  (define-page path
    (lambda ()
      `(html (body ,(content))))
    no-template: #t))

(define-custom-page (main-page-path)
  (lambda ()
    "Hey!"))
</enscript>

If you access {{http://localhost:8080}} you'll get the following HTML code:

  <html>
  <body>Hey!</body></html>


==== Debugging: error messages on the browser window

Error messages right on the browser window can be quite handy for
debugging (although not for production environments).  Here's a way to
accomplish that:

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(page-exception-message
 (lambda (exn)
   `(pre ,(with-output-to-string
            (lambda ()
              (print-call-chain)
              (print-error-message exn))))))

(define-page (main-page-path)
  (lambda ()
    `("Boom!" ,(+ 1 "foo"))))
</enscript>

This feature is automatically enabled when the awful application
server is used with the {{--development-mode}} option.



==== Run awful without arguments to quickly share a file

When invoked without arguments, awful (the application) starts the web
server using the current directory as root path and keeps listening on
port 8080.  So, if you want to quickly share a file (or some files),
change to the directory containing the files and execute {{awful}}.
The access {{http://<host>:8080/<the-file-you-want>}}.


==== Awful & SXML

Since version 0.36, awful provides SXML support.  To enable it, you
can either do it globally, by setting the {{enable-sxml}} parameter to
{{#t}}, or in a per-page basis, by binding {{define-page}}'s
{{use-sxml}} keyword parameter to {{#t}}.

Notice that supporting SXML by default is a goal.  Strings support
will be deprecated and removed in future versions.  So, if you are
about to start a project using awful, consider setting {{enable-sxml}}
to {{#t}}.

Here are some examples:

===== Globally using SXML

<enscript highlight=scheme>
(use awful)

(enable-sxml #t)

(define-page (main-page-path)
  (lambda ()
    `(div (@ (id "content"))
          "Hi, this is awful " ,(awful-version))))
</enscript>


You can also use [[/egg/html-tags|html-tags]] and
[[/egg/html-utils|html-utils]] to generate SXML content:

<enscript highlight=scheme>
(use awful html-tags)

(enable-sxml #t)
(generate-sxml? #t) ;; from html-tags

(define-page (main-page-path)
  (lambda ()
    (<div> id: "content"
           "Hi, this is awful " (awful-version))))
</enscript>


===== Using SXML in a per-page basis

<enscript highlight=scheme>
(use awful html-tags)

(define-page "/strings"
  (lambda ()
    (<div> id: "content"
           "Hi, this is awful " (awful-version))))


(define-page "/sxml"
  (lambda ()
    `(div (@ (id "content"))
          "Hi, this is awful " ,(awful-version)))
  use-sxml: #t)


(define-page "/sxml-with-html-tags"
  (lambda ()
    (parameterize ((generate-sxml? #t))
      (<div> id: "content"
             "Hi, this is awful " (awful-version))))
  use-sxml: #t)
</enscript>


==== Reloading awful from Emacs

Here's a quick hack to reload awful apps from Emacs.  It can be handy
when you are developing using awful in development mode
({{--development-mode}}, or when you defined your own reload path).

<enscript highlight=elisp>
(defun awful-reload ()
  (interactive)
  (shell-command "lynx -dump http://localhost:8080/reload"))

(add-hook 'scheme-mode-hook
   #'(lambda ()
       (local-set-key "\C-cR" 'awful-reload)))
</enscript>

The code above defines an {{awful-reload}} procedure, which requests
the {{/reload}} path (automatically defined by awful when running in
development mode) using {{lynx}}.  You can use whatever command line
HTTP client you want. {{lynx}} is handy because of the {{-dump}}
option, which can be readly displayed by Emacs in the shell command
output buffer.

Here's a screenshot:

[[image:http://parenteses.org/mario/img/awful/awful-reload-emacs.png|Reloading awful apps from Emacs]]


==== Performance tweaks

* if you don't intend to use static index files, you may configure the
[[/egg/spiffy|Spiffy]] {{index-files}} parameter to {{'()}}.  That
will disable the lookup for static index files (or you can configure
it to contain only the static index files you use).

* awful usually performs better with a larger stack size (1MB is a
reasonable value).  You can set the runtime stack size with the
{{-:s}} command line option (see
[[/manual/Using the compiler#runtime-options|the CHICKEN manual
page]] for other options):

  $ awful -:s1m my-app.so



==== Binding URI paths as arguments to page handler procedures

<enscript highlight=scheme>
(use awful regex srfi-13)

(define (define-page* page-path content)
  (define-page (regexp (string-append page-path "/*.*"))
    (lambda (path)
      (let ((url-args
             (string-split
              ;; Removing `page-path' from the requested path
              (string-drop path (string-length page-path))
              "/")))
        (condition-case
         (apply content url-args)
         ((exn arity) "invalid arity")
         (exn () (signal exn)))))))


;;;
;;; /page1 ignores all arguments
;;;
;; http://<server>:<port>/page1 => "no args"
;; http://<server>:<port>/page1/1 => "no args"
;; http://<server>:<port>/page1/1/2 => "no args"
(define-page* "/page1"
  (lambda _
    "no args"))


;;;
;;; /page2 requires exactly one argument
;;;
;; http://<server>:<port>/page2 => "invalid arity"
;; http://<server>:<port>/page2/1 => "foo=1"
;; http://<server>:<port>/page1/1/2 => "invalid arity"
(define-page* "/page2"
  (lambda (foo)
    (conc "foo=" foo)))


;;;
;;; /page3 requires one argument (the other is optional).  Ignores the
;;; rest.
;;;
;; http://<server>:<port>/page3 => "invalid arity"
;; http://<server>:<port>/page3/1 => "foo=1, bar=#f"
;; http://<server>:<port>/page1/1/2 => "foo=1, bar=2"
;; http://<server>:<port>/page1/1/2/3 => "foo=1, bar=2"
(define-page* "/page3"
  (lambda (foo #!optional bar)
    (conc "foo=" foo ", bar=" bar)))


;;;
;;; /page4: all arguments are optional (get bound if given).
;;;
;; http://<server>:<port>/page4 => "foo=#f, bar=#f"
;; http://<server>:<port>/page4/1 => "foo=1, bar=#f"
;; http://<server>:<port>/page4/1/2 => "foo=1, bar=2"
;; http://<server>:<port>/page4/1/2/3 => "foo=1, bar=2"
(define-page* "/page4"
  (lambda (#!optional foo bar)
    (conc "foo=" foo ", bar=" bar)))
</enscript>


==== Awful badge

Here's a suggestion:  [[image:http://parenteses.org/mario/img/thats-awful.png|That's awful!]]
